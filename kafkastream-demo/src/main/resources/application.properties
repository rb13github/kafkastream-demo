
server.port=${SERVER_PORT:8080}


logging.level.root=info
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
#logging.level.org.springframework=INFO
#logging.level.org.springframework.web=INFO
#logging.level.org.hibernate=ERROR


#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#spring.jpa.generate-ddl=true

!-- using environment variable
#jdbc:postgresql://postgre.zenith-cis-app.svc.cluster.local:5432/zenithomdb
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/postgres}
#user = root 
#user=postgres
spring.datasource.username=${DB_USER:root}
spring.datasource.password=${DB_PASSWORD:root}
#for root user password is also root
#for postgres user password is also postgres
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
!--spring.jpa.hibernate.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#https://zenith-om-order-reservation-comp-zenith-cis-app.container-crush-02-4044f3a4e314f4bcb433696c70d13be9-0000.eu-de.containers.appdomain.cloud/
#kafka.bootstrapAddress=localhost:9092
#oz-kafka-cluster-kafka-bootstrap:9092
#oz-kafka-cluster-kafka-0.oz-kafka-cluster-kafka-brokers.zenith-cis-app.svc.cluster.local
#kafka.bootstrapAddress=${KAFKA_BOOTSTRAP_URL}
# openshift:kafka-cluster-persistent-kafka-bootstrap.amq-streams.svc.cluster.local:9092
#kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_URL}
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_URL:localhost:9092}
#message.topic.product-reserve-consume.name=oms-reserve-event
#message.topic.product-status-publish.name=oms-product-status
#filtered.topic.name=filtered
#partitioned.topic.name=partitioned
#zookeeper.product-reserve-consume.group-id=reservegroupid
#zookeeper.product-status-publish.group-id=statusgroupid

#cloud.stream.kafka.binder.brokers=localhost:9092
#oz-kafka-cluster-kafka-brokers
#oz-kafka-cluster-kafka-0.oz-kafka-cluster-kafka-brokers.zenith-cis-app.svc.cluster.loca
# open shift : kafka-cluster-persistent-kafka-bootstrap.amq-streams.svc.cluster.local:9092
spring.cloud.stream.kafka.binder.brokers=${KAFKA_BROKERS_URL:localhost:9092}
#spring.cloud.stream.kafka.binder.auto-create-topics= true
spring.cloud.stream.kafka.binder.auto-create-topics= ${AUTO_CREATE_TOPICS:true}
#spring.cloud.stream.kafka.binder.auto-add-partitions= true
spring.cloud.stream.kafka.binder.auto-add-partitions= ${AUTO_ADD_PARTITIONS:true}

 
#Producer 
spring.cloud.stream.bindings.product-status-producer.destination=${KAFKA_TOPIC_OMS_PRODUCT_STATUS:zenith-oms-product-event}
spring.cloud.stream.bindings.product-status-producer.content-type=application/json  
spring.cloud.stream.bindings.product-reserve-producer.destination=${KAFKA_TOPIC_OMS_RESERVE_EVENT:zenith-oms-reserve-event}

  #consumer
spring.cloud.stream.bindings.product-reserve-consumer.destination=${KAFKA_TOPIC_OMS_RESERVE_EVENT:zenith-oms-reserve-event}
spring.cloud.stream.bindings.product-reserve-consumer.content-type=application/json  
  
product.status.reserve=${STATUS_RESERVED:RESERVED}
product.status.reject=${STATUS_REJECTED:REJECTED}
